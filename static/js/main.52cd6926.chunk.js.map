{"version":3,"sources":["types/calendar.tsx","types/users.ts","types/index.tsx","serviceWorker.ts","components/DarkMode/index.tsx","components/header/NavItem.tsx","components/header/index.tsx","home/components/layout/index.tsx","home/components/eventCard/index.tsx","home/components/sidebar/index.tsx","home/components/calendar/components/eventCard/index.tsx","home/components/calendar/components/day/index.tsx","home/components/calendar/components/day_index/index.tsx","home/components/calendar/index.tsx","home/components/createEvent/index.tsx","home/index.tsx","login/components/loginBox/index.tsx","login/index.tsx","routes.tsx","index.tsx","schema.ts"],"names":["Modules","Role","Boolean","window","location","hostname","match","DarkModeToggle","useColorMode","colorMode","toggleColorMode","aria-label","onClick","icon","Moon","Sun","isRound","NavItem","children","m","p","fontSize","Header","useRouteMatch","h","zIndex","bg","light","dark","pos","left","right","top","borderBottomWidth","width","justify","align","w","maxWidth","to","ViewGrid","props","templateColumns","gap","ViewSide","overflow","borderRightStyle","borderRightColor","borderRightWidth","EventCard","event","createEvent","color","rounded","height","type","name","Sidebar","events","eventCards","map","index","spacing","padding","SidebarWrapper","scale","start_time","Date","end_time","minute_shift","Math","round","getMinutes","duration","getTime","gap_jumps","floor","marginTop","marginX","position","borderLeft","borderColor","textAlign","dayjs","format","isTruncated","title","noOfLines","description","Day","bgColor","table","Array","fill","value","events_this_hour","filter","getHours","DayIndex","justifyContent","id","undefined","week_days","Calendar","altBgColor","current_course","store","get","days","day","day_events","day_index","getDay","href","url","mb","overflowY","sx","display","CreateEventModal","onClose","isOpen","prefilledData","toast","useToast","initialState","error","touched","startTime","endTime","useState","formData","setFormData","updateElementState","element","target","is_element_invalid","prevState","to_update","commonFormElementProps","onChange","onBlur","errorBorderColor","location_options","item","eventType_options","eventTypes","closeOnOverlayClick","placeholder","isInvalid","max","min","colorScheme","mr","is_valid","eventType","find","save_event","status","isClosable","variant","values","course_index","courses","push","set","Home","eventData","setEventData","useDisclosure","isCreateEventOpen","onCreateEventOpen","onOpen","onCreateEventClose","data","a","JSON","stringify","LoginBox","history","useHistory","username","setUsername","password","setPassword","margin","borderWidth","borderRadius","boxShadow","my","onSubmit","isRequired","size","currentTarget","mt","Login","Routes","bgGradient","exact","path","component","createBrowserHistory","App","defaults","module","Databases","courseId","enroled_groups","shedulers","locations","console","log","setup_local_storage","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.52cd6926.chunk.js","sourcesContent":["import { Group, Scheduler } from './users'\n\nexport type Calendar = {\n  courses: Course[]\n}\n\nexport type Course = {\n  name: string\n  module: Modules\n  description?: string\n  courseId: string\n  enroled_groups: Group[]\n  shedulers: Scheduler[]\n  events: CalendarEvent[]\n  eventTypes: CalendarEventType[]\n}\n\nexport type CalendarEventType = {\n  name: string\n  color: string\n}\n\nexport type CalendarEvent = {\n  title: string\n  description?: string\n  type: CalendarEventType\n  location: string\n  start_time: string\n  end_time: string\n}\n\nexport type PrefillEventData = {\n  type?: CalendarEventType\n  startTime?: string\n}\n\nexport type AvaliabilityTable = {\n  fixed: string[]\n  variable: string[]\n}\n\nexport enum Modules {\n  Databases,\n  Accounting,\n  WebDev,\n  Business,\n  // TODO: add more or make editiable\n}\n","import { AvaliabilityTable, CalendarEvent, Course, Modules } from \"./calendar\"\n\nexport enum Role {\n  Admin,\n  Scheduler,\n  Trainer,\n  Consultant,\n}\n\nexport class User {\n  permission!: Role\n  email!: string\n  flag: boolean = false\n  academy_location!: string\n  name!: string\n  profile_picture: string | undefined\n}\n\nexport class Trainer extends User {\n  permission : Role = Role.Trainer\n  skills!: Modules[]\n  avaliability!: AvaliabilityTable\n  events: CalendarEvent[] = []\n}\n\nexport class Consultant extends User {\n  permission : Role = Role.Consultant\n}\n\nexport class Admin extends User {\n  permission : Role = Role.Admin\n}\n\nexport class Scheduler extends User {\n  permission : Role = Role.Scheduler\n  working_courses : Course[] = []\n   \n}\n\nexport type Group = {\n  name : string\n  consultants : Consultant[]\n\n}\n\n","export * from './params'\nexport * from './calendar'\nexport * from './users'\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport { IconButton, useColorMode } from '@chakra-ui/react'\nimport { MoonIcon, SunIcon } from '@chakra-ui/icons'\n\nexport function DarkModeToggle() {\n  const { colorMode, toggleColorMode } = useColorMode()\n  return (\n    <IconButton\n      aria-label='change color mode'\n      onClick={toggleColorMode}\n      icon={colorMode === 'light' ? <MoonIcon /> : <SunIcon />}\n      isRound={true}\n    />\n  )\n}\n","import React from 'react'\nimport { Text } from '@chakra-ui/react'\n\ntype Props = {\n  children: React.ReactElement\n}\n\nexport const NavItem = ({ children }: Props) => {\n  return (\n    <Text m='auto' p={4} fontSize='lg'>\n      {children}\n    </Text>\n  )\n}\n","import React from 'react'\nimport { Box, Flex, useColorMode } from '@chakra-ui/react'\nimport { Link, useRouteMatch } from 'react-router-dom'\nimport { DarkModeToggle } from '../DarkMode'\nimport { NavItem } from './NavItem'\nimport { MatchParams } from '../../types'\n\nexport const Header = () => {\n  const match = useRouteMatch<MatchParams>()\n\n  const { colorMode } = useColorMode()\n  const bgColor = { light: 'gray.200', dark: 'gray.700' }\n  return (\n    <Box h='4rem'>\n      <Box\n        zIndex={1}\n        p={4}\n        h='4rem'\n        bg={bgColor[colorMode]}\n        pos={'fixed'}\n        left='0'\n        right='0'\n        top='0'\n        borderBottomWidth='1px'\n        width='full'\n      >\n        <Flex justify='space-between' align='center' w='100%' h='100%'>\n          <Flex align='center' justify='space-evenly' maxWidth='480px'>\n            <NavItem>\n              <Link to='/'>Home</Link>\n            </NavItem>\n          </Flex>\n          <DarkModeToggle />\n        </Flex>\n      </Box>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { Grid, GridProps, Box, BoxProps, useColorMode } from '@chakra-ui/react'\n\nexport const ViewGrid = (props: GridProps) => <Grid {...props} templateColumns='16rem minmax(0, 1fr)' gap={0} />\n\nexport const ViewSide = (props: BoxProps) => {\n  const { colorMode } = useColorMode()\n  const borderColor = { light: 'gray.200', dark: 'gray.600' }\n  return (\n    <Box\n      {...props}\n      overflow='hidden'\n      borderRightStyle='solid'\n      borderRightColor={borderColor[colorMode]}\n      borderRightWidth='1px'\n    />\n  )\n}\n","import React from 'react'\nimport { Box } from '@chakra-ui/react'\nimport { CalendarEventType, PrefillEventData } from '../../../types'\n\nexport type CreateEventCaller = (data: PrefillEventData) => void\n\ntype Props = {\n  event: CalendarEventType\n  createEvent: CreateEventCaller\n}\n\nexport const EventCard = ({ event, createEvent }: Props) => {\n  return (\n    <Box\n      p={3}\n      bg={event.color}\n      rounded={6}\n      height={20}\n      fontSize={18}\n      onClick={() => createEvent({ type: event })}\n    >\n      {event.name}\n    </Box>\n  )\n}\n","import React, { PropsWithChildren } from 'react'\nimport { ViewGrid, ViewSide } from '../layout'\nimport { Box, Stack } from '@chakra-ui/react'\nimport { EventCard, CreateEventCaller } from '../eventCard'\nimport { CalendarEventType } from '../../../types'\n\ntype Props = {\n  events: CalendarEventType[]\n  createEvent: CreateEventCaller\n}\n\nexport const Sidebar = ({ events, createEvent }: Props) => {\n  const eventCards = events.map((event, index) => (\n    <EventCard key={index} event={event} createEvent={createEvent} />\n  ))\n  return (\n    <Stack spacing={2} padding={2}>\n      {eventCards}\n    </Stack>\n  )\n}\n\nexport const SidebarWrapper = ({\n  children,\n  events,\n  createEvent,\n}: Props & PropsWithChildren<{}>) => {\n  return (\n    <ViewGrid>\n      <ViewSide>\n        <Sidebar events={events} createEvent={createEvent} />\n      </ViewSide>\n      <Box p={3}>{children}</Box>\n    </ViewGrid>\n  )\n}\n","import { Box, Heading, Text } from '@chakra-ui/react'\nimport React from 'react'\nimport { CalendarEvent } from '../../../../../types'\nimport dayjs from 'dayjs'\n\ntype Props = {\n  event: CalendarEvent\n  scale: number\n}\nexport const EventCard = ({ event, scale }: Props) => {\n  const start_time = new Date(event.start_time)\n  const end_time = new Date(event.end_time)\n  const minute_shift = Math.round((start_time.getMinutes() / 60) * scale)\n  const duration = (end_time.getTime() - start_time.getTime()) / (1000 * 3600)\n  const gap_jumps = Math.floor(duration - 4 / scale)\n  return (\n    <Box\n      marginTop={`${minute_shift}px`}\n      height={`${Math.round(duration * scale) + gap_jumps * 4}px`}\n      p={2}\n      bg={event.type.color}\n      rounded={6}\n      fontSize={18}\n      marginX={1}\n      position='relative'\n      borderLeft='4px'\n      borderColor='rgba(0,0,0,0.4)'\n    >\n      <Text fontSize='md' textAlign='right'>\n        {`${dayjs(start_time).format('HH:mm')} - ${dayjs(end_time).format('HH:mm')}`}\n      </Text>\n      <Heading isTruncated fontSize='lg'>\n        {event.title}\n      </Heading>\n      {gap_jumps > 0 && <Text noOfLines={gap_jumps * 2}>{event.description}</Text>}\n    </Box>\n  )\n}\n","import React from 'react'\nimport { Box, useColorMode, VStack } from '@chakra-ui/react'\nimport { CalendarEvent } from '../../../../../types'\nimport { EventCard } from '../eventCard'\n\ntype Props = {\n  events: CalendarEvent[]\n  scale: number\n}\n\nexport const Day = ({ events, scale }: Props) => {\n  const { colorMode } = useColorMode()\n  const bgColor = { light: 'gray.200', dark: 'gray.700' }\n\n  const table: JSX.Element[] = new Array<JSX.Element>(24).fill(<></>).map((value, index) => {\n    const events_this_hour = events\n      .filter((event) => {\n        const time = new Date(event.start_time)\n        return time.getHours() === index\n      })\n      .map((event, index) => <EventCard event={event} scale={scale} />)\n    return (\n      <Box w='100%' h={`${scale}px`} bg={bgColor[colorMode]}>\n        {events_this_hour}\n      </Box>\n    )\n  })\n\n  return (\n    <VStack spacing={1} maxWidth='100%' overflow='hidden'>\n      {table}\n    </VStack>\n  )\n}\n","import React from 'react'\nimport { Center, useColorMode, VStack } from '@chakra-ui/react'\n\nexport const DayIndex = () => {\n  const { colorMode } = useColorMode()\n  const bgColor = { light: 'gray.300', dark: 'gray.600' }\n\n  const table: JSX.Element[] = new Array<JSX.Element>(24).fill(<></>).map((value, index) => {\n    return (\n      <Center\n        w='100%'\n        h='16'\n        bg={bgColor[colorMode]}\n        justifyContent='center'\n        fontSize='lg'\n        id={index === 9 ? 'anchorTime' : undefined}\n      >\n        {index}:00\n      </Center>\n    )\n  })\n\n  return <VStack spacing={1}>{table}</VStack>\n}\n","import React from 'react'\nimport { Box, Grid, HStack, useColorMode } from '@chakra-ui/react'\nimport { Day } from './components/day'\nimport store from 'store'\nimport { Course, MatchParams } from '../../../types'\nimport { DayIndex } from './components/day_index'\nimport { useRouteMatch } from 'react-router-dom'\n\nconst week_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n\nexport const Calendar = () => {\n  const match = useRouteMatch<MatchParams>()\n  const { colorMode } = useColorMode()\n  const altBgColor = { light: 'gray.300', dark: 'gray.600' }\n  const scale = 64\n\n  const current_course: Course = store.get('courses')[0]\n\n  const days = week_days.map((day, index) => (\n    <Box w='100%' h='14' bg={altBgColor[colorMode]} padding='3' fontSize='20' isTruncated>\n      {day}\n    </Box>\n  ))\n  const day_events = week_days.map((day, day_index) => {\n    const events = current_course.events.filter((event) => {\n      const time = new Date(event.start_time)\n      return time.getDay() - 1 === day_index\n    })\n    return <Day events={events} scale={scale} />\n  })\n  return (\n    <Box>\n      <a href={`${match.url}#anchorTime`}>hi</a>\n      <Grid templateColumns='7% repeat(7, 13%)' gap={1} mb={1}>\n        <Box></Box>\n        {days}\n      </Grid>\n      <Box\n        height={`${(scale + 4) * 9}px`}\n        overflowY='scroll'\n        sx={{\n          '::-webkit-scrollbar': { display: 'none' },\n          '-ms-overflow-style': 'none',\n          'scrollbar-width': 'none',\n          'scroll-snap-type': 'y manditory',\n        }}\n      >\n        <Grid templateColumns='7% repeat(7, 13%)' gap={1}>\n          <DayIndex />\n          {day_events}\n        </Grid>\n      </Box>\n    </Box>\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Select,\n  Textarea,\n  useToast,\n} from '@chakra-ui/react'\nimport { CalendarEvent, CalendarEventType, Course, PrefillEventData } from '../../../types'\nimport store from 'store'\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  prefilledData: PrefillEventData\n}\n\ntype InputElements = HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\n\ntype FormData = {\n  title: FormElement\n  description: FormElement\n  location: FormElement\n  startTime: FormElement\n  endTime: FormElement\n  type: FormElement\n}\n\ntype FormElement = {\n  value: string\n  error: boolean\n  touched: boolean\n}\n\nexport const CreateEventModal = ({ onClose, isOpen, prefilledData }: Props) => {\n  const toast = useToast()\n  const initialState: FormData = {\n    title: { value: '', error: false, touched: false },\n    description: { value: '', error: false, touched: true },\n    location: { value: '', error: false, touched: false },\n    startTime: { value: '', error: false, touched: false },\n    endTime: { value: '', error: false, touched: false },\n    type: {\n      value: prefilledData.type?.name || '',\n      error: false,\n      touched: prefilledData.type?.name !== undefined,\n    },\n  }\n  const [formData, setFormData] = useState<FormData>(initialState)\n\n  const updateElementState: React.ChangeEventHandler<InputElements> = (event) => {\n    const { name, value } = event.target\n    const error = is_element_invalid(name, value, true, formData)\n    setFormData((prevState) => ({ ...prevState, [name]: { touched: true, value, error } }))\n    let element: keyof FormData\n    const to_update: Partial<FormData> = {}\n    for (element in formData) {\n      const is_invalid = is_element_invalid(\n        element,\n        formData[element].value,\n        formData[element].touched,\n        formData,\n      )\n      if (is_invalid !== formData[element].error) {\n        to_update[element] = { ...formData[element], error: !formData[element].error }\n      }\n    }\n    setFormData((prevState) => ({ ...prevState, ...to_update }))\n  }\n  const commonFormElementProps = {\n    onChange: updateElementState,\n    onBlur: updateElementState,\n    errorBorderColor: 'crimson',\n  }\n  const location_options = store.get('locations').map((item: string, index: number) => (\n    <option key={index} value={item}>\n      {item}\n    </option>\n  ))\n  const current_course: Course = store.get('courses')[0] //TODO: add course selection and creation\n  const eventType_options = current_course.eventTypes.map(\n    (type: CalendarEventType, index: number) => (\n      <option key={index} value={type.name}>\n        {type.name}\n      </option>\n    ),\n  )\n  return (\n    <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Create Event</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <FormControl>\n            <FormLabel>Title</FormLabel>\n            <Input\n              name='title'\n              placeholder={`${prefilledData.type?.name} name`}\n              value={formData.title.value}\n              isInvalid={formData.title.error}\n              {...commonFormElementProps}\n            />\n          </FormControl>\n\n          <FormControl>\n            <FormLabel>Description</FormLabel>\n            <Textarea\n              name='description'\n              placeholder='Some text here'\n              value={formData.description.value}\n              isInvalid={formData.description.error}\n              {...commonFormElementProps}\n            />\n          </FormControl>\n\n          <FormControl>\n            <FormLabel>Location</FormLabel>\n            <Select\n              name='location'\n              placeholder='Select option'\n              value={formData.location.value}\n              isInvalid={formData.location.error}\n              {...commonFormElementProps}\n            >\n              {location_options}\n            </Select>\n          </FormControl>\n\n          <FormControl>\n            <FormLabel>Start Time</FormLabel>\n            <Input\n              name='startTime'\n              type='datetime-local'\n              max={formData.endTime.value}\n              value={formData.startTime.value}\n              isInvalid={formData.startTime.error}\n              {...commonFormElementProps}\n            />\n          </FormControl>\n\n          <FormControl>\n            <FormLabel>End Time</FormLabel>\n            <Input\n              name='endTime'\n              type='datetime-local'\n              min={formData.startTime.value}\n              value={formData.endTime.value}\n              isInvalid={formData.endTime.error}\n              {...commonFormElementProps}\n            />\n          </FormControl>\n\n          <FormControl>\n            <FormLabel>Event Type</FormLabel>\n            <Select\n              name='type'\n              value={formData.type.value}\n              isInvalid={formData.type.error}\n              {...commonFormElementProps}\n            >\n              {eventType_options}\n            </Select>\n          </FormControl>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button\n            colorScheme='blue'\n            mr={3}\n            onClick={() => {\n              if (is_valid(formData)) {\n                const eventType = current_course.eventTypes.find(\n                  (type) => type.name === formData.type.value,\n                )\n                if (eventType !== undefined) {\n                  save_event(0, {\n                    title: formData.title.value,\n                    description: formData.description.value,\n                    type: eventType,\n                    location: formData.location.value,\n                    start_time: formData.startTime.value,\n                    end_time: formData.endTime.value,\n                  })\n                }\n                onClose()\n              } else {\n                toast({\n                  title: `Make sure you filled in all the fields`,\n                  status: 'error',\n                  isClosable: true,\n                })\n              }\n            }}\n          >\n            Create\n          </Button>\n          <Button variant='ghost' onClick={onClose}>\n            Cancel\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  )\n}\n\nconst is_element_invalid = (name: string, value: string, touched: boolean, values: FormData) => {\n  if (touched) {\n    if (name !== 'description' && value === '') {\n      return true\n    }\n    if (\n      name === 'startTime' &&\n      values.endTime.value !== '' &&\n      new Date(value) >= new Date(values.endTime.value)\n    ) {\n      return true\n    }\n    if (\n      name === 'endTime' &&\n      values.startTime.value !== '' &&\n      new Date(value) <= new Date(values.startTime.value)\n    ) {\n      return true\n    }\n  }\n  return false\n}\nconst is_valid = (values: FormData) => {\n  //TODO: switch to use of .every\n  let element: keyof FormData\n  for (element in values) {\n    if (values[element].error || !values[element].touched) {\n      return false\n    }\n  }\n  return true\n}\n\nconst save_event = (course_index: number, event: CalendarEvent) => {\n  const courses: Course[] = store.get('courses')\n  courses[course_index].events.push(event)\n  store.set('courses', courses)\n}\n","import React, { useState } from 'react'\nimport { Box, useDisclosure } from '@chakra-ui/react'\nimport { SidebarWrapper } from './components/sidebar'\nimport { Calendar } from './components/calendar'\nimport { Course, PrefillEventData } from '../types'\nimport { CreateEventModal } from './components/createEvent'\nimport store from 'store'\n\nexport const Home = () => {\n  const [eventData, setEventData] = useState<PrefillEventData>({})\n  const {\n    isOpen: isCreateEventOpen,\n    onOpen: onCreateEventOpen,\n    onClose: onCreateEventClose,\n  } = useDisclosure()\n  const createEvent = async (data: PrefillEventData) => {\n    await setEventData(data)\n    onCreateEventOpen()\n  }\n  const current_course: Course = store.get('courses')[0] //TODO: add course selection and creation\n  return (\n    <Box height='100%'>\n      <SidebarWrapper events={current_course.eventTypes} createEvent={createEvent}>\n        <Calendar />\n        <CreateEventModal\n          key={`${JSON.stringify(eventData, null, 2)}`} // to make it rerender\n          isOpen={isCreateEventOpen}\n          onClose={onCreateEventClose}\n          prefilledData={eventData}\n        />\n      </SidebarWrapper>\n    </Box>\n  )\n}\n","import React, { useState } from 'react'\nimport { Flex, Box, Heading, FormControl, FormLabel, Input, Button, Checkbox, useToast } from '@chakra-ui/react'\nimport { useHistory } from 'react-router-dom'\n\nexport const LoginBox = () => {\n  const history = useHistory()\n  const toast = useToast()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const handleSubmit = (event: { preventDefault: () => void; }) => {\n    if (username === 'ADMIN' && password ==='ADMIN') {\n      history.push(\"/home\")\n    } else {\n      toast({\n        title: \"Invalid Username/Password\",\n        status: \"error\",\n        isClosable: true,\n      })\n    }\n  };\n\n  return (\n    <Flex width='full' align='center' justifyContent='center'>\n      <Box margin={10} p={8} maxWidth=\"500px\" borderWidth={1} borderRadius={8} boxShadow=\"lg\">\n        <Box textAlign=\"center\">\n          <Heading>Login</Heading>\n        </Box>\n        <Box my={4} textAlign=\"left\">\n          <form onSubmit={handleSubmit}>\n            <FormControl isRequired>\n              <FormLabel>Username</FormLabel>\n              <Input \n                type=\"text\" \n                placeholder=\"Username\"\n                size='lg'\n                onChange={event => setUsername(event.currentTarget.value)}\n              />\n            </FormControl>\n            <FormControl mt={6} isRequired>\n              <FormLabel>Password</FormLabel>\n              <Input \n                type=\"password\"\n                placeholder=\"Password\"\n                size='lg'\n                onChange={event => setPassword(event.currentTarget.value)}\n              />\n            </FormControl>\n            <Checkbox>Remember Me</Checkbox>{/*TODO: Add functionality(Possible )*/}\n            <Button width=\"full\" mt={4} type=\"submit\">\n              Log In\n            </Button>\n          </form>\n        </Box>\n      </Box>\n    </Flex>\n  )\n}","import React from 'react'\nimport { Box } from '@chakra-ui/react'\nimport { LoginBox } from './components/loginBox'\n\nexport const Login = () => {\n  return (\n    <Box height='100%'>\n      <LoginBox />\n    </Box>\n  )\n} ","import { Box } from '@chakra-ui/react'\nimport React from 'react'\nimport { Redirect, Route, Switch, useRouteMatch } from 'react-router-dom'\nimport { Header } from './components/header'\nimport { Home } from './home'\nimport { Login } from './login'\n\nexport type MatchParams = {\n  isExact: string\n  path: string\n  url: string\n}\n\nconst Routes = () => {\n  const match = useRouteMatch<MatchParams>()\n  return (\n    <Box bgGradient='linear(to-r, blue.200, grey.500)'>\n      <Header />\n      <Box>\n        <Switch>\n          <Route exact key='route-login' path='/' component={Login} />\n          <Route key='route-home' path='/home' component={Home} />\n          {/* <Redirect from='*' to='/' /> TODO: add 404 page instead */}\n        </Switch>\n      </Box>\n    </Box>\n  )\n}\n\nexport default Routes\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport { HashRouter, Router } from 'react-router-dom'\nimport './App.css'\nimport { CSSReset, ChakraProvider } from '@chakra-ui/react'\nimport Routes from './routes'\nimport { createBrowserHistory } from 'history'\nimport { setup_local_storage } from './schema'\n\nconst history = createBrowserHistory()\n\nfunction App() {\n  setup_local_storage()\n  return (\n    <ChakraProvider>\n      <CSSReset />\n      <Router history={history}>\n        <Routes />\n      </Router>\n    </ChakraProvider>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { Course, Modules } from './types'\nimport store from 'store'\n\ntype Schema = {\n  courses: Course[]\n  locations: string[]\n}\n\nexport const setup_local_storage = () => {\n  const defaults: Schema = {\n    courses: [\n      {\n        name: 'test',\n        module: Modules.Databases,\n        description: 'this is a temporary test course',\n        courseId: 'test123',\n        enroled_groups: [],\n        shedulers: [],\n        events: [],\n        eventTypes: [\n          { name: 'Lecture', color: 'tomato' },\n          { name: 'Lab', color: 'orange' },\n          { name: 'Exam', color: 'purple' },\n        ],\n      },\n    ],\n    locations: ['London', 'HongKong', 'Paris'],\n  }\n  let item: keyof typeof defaults\n  for (item in defaults) {\n    if (store.get(item) === undefined) {\n      console.log(defaults[item])\n      store.set(item, defaults[item])\n    }\n  }\n}\n"],"sourceRoot":""}