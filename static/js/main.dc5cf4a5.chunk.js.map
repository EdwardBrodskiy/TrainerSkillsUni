{"version":3,"sources":["types/calendar.tsx","types/users.ts","types/index.tsx","serviceWorker.ts","components/DarkMode/index.tsx","components/header/NavItem.tsx","components/header/index.tsx","home/components/layout/index.tsx","home/components/eventCard/index.tsx","home/components/sidebar/index.tsx","home/components/calendar/index.tsx","home/components/createEvent/index.tsx","home/index.tsx","login/components/loginBox/index.tsx","login/index.tsx","routes.tsx","index.tsx","schema.ts"],"names":["Modules","Role","Boolean","window","location","hostname","match","DarkModeToggle","useColorMode","colorMode","toggleColorMode","aria-label","onClick","icon","Moon","Sun","isRound","NavItem","children","m","p","fontSize","Header","useRouteMatch","h","zIndex","bg","light","dark","pos","left","right","top","borderBottomWidth","width","justify","align","w","maxWidth","to","ViewGrid","props","templateColumns","gap","ViewSide","overflow","borderRightStyle","borderRightColor","borderRightWidth","EventCard","event","createEvent","color","rounded","height","type","name","Sidebar","events","eventCards","map","index","spacing","padding","SidebarWrapper","week_days","Calendar","altBgColor","days","day","table","Array","fill","CreateEventModal","onClose","isOpen","prefilledData","initialState","title","description","startTime","duration","useState","setFormData","onChange","target","value","prevState","location_options","store","get","item","eventType_options","eventTypes","closeOnOverlayClick","placeholder","defaultValue","colorScheme","mr","console","log","variant","Home","eventData","setEventData","useDisclosure","isCreateEventOpen","onCreateEventOpen","onOpen","onCreateEventClose","current_course","data","LoginBox","history","useHistory","toast","useToast","username","setUsername","password","setPassword","justifyContent","margin","borderWidth","borderRadius","boxShadow","textAlign","my","onSubmit","push","status","isClosable","isRequired","size","currentTarget","mt","Login","Routes","bgGradient","exact","path","component","from","createBrowserHistory","App","defaults","courses","module","Databases","courseId","enroled_groups","shedulers","locations","undefined","set","setup_local_storage","basename","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dc5cf4a5.chunk.js","sourcesContent":["import { Group, Scheduler } from './users'\n\nexport type Calendar = {\n  courses: Course[]\n}\n\nexport type Course = {\n  name: string\n  module: Modules\n  description?: string\n  courseId: string\n  enroled_groups: Group[]\n  shedulers: Scheduler[]\n  events: Event[]\n  eventTypes: CalendarEventType[]\n}\n\nexport type CalendarEventType = {\n  name: string\n  color: string\n}\n\nexport type CalendarEvent = {\n  title: string\n  description?: string\n  type: CalendarEventType\n  location: string\n  start_time: string\n  duration: string\n}\n\nexport type PrefillEventData = {\n  type?: CalendarEventType\n  startTime?: string\n}\n\nexport type AvaliabilityTable = {\n  fixed: string[]\n  variable: string[]\n}\n\nexport enum Modules {\n  Databases,\n  Accounting,\n  WebDev,\n  Business,\n  // TODO: add more or make editiable\n}\n","import { AvaliabilityTable, CalendarEvent, Course, Modules } from \"./calendar\"\n\nexport enum Role {\n  Admin,\n  Scheduler,\n  Trainer,\n  Consultant,\n}\n\nexport class User {\n  permission!: Role\n  email!: string\n  flag: boolean = false\n  academy_location!: string\n  name!: string\n  profile_picture: string | undefined\n}\n\nexport class Trainer extends User {\n  permission : Role = Role.Trainer\n  skills!: Modules[]\n  avaliability!: AvaliabilityTable\n  events: CalendarEvent[] = []\n}\n\nexport class Consultant extends User {\n  permission : Role = Role.Consultant\n}\n\nexport class Admin extends User {\n  permission : Role = Role.Admin\n}\n\nexport class Scheduler extends User {\n  permission : Role = Role.Scheduler\n  working_courses : Course[] = []\n   \n}\n\nexport type Group = {\n  name : string\n  consultants : Consultant[]\n\n}\n\n","export * from './params'\nexport * from './calendar'\nexport * from './users'\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport { IconButton, useColorMode } from '@chakra-ui/react'\nimport { MoonIcon, SunIcon } from '@chakra-ui/icons'\n\nexport function DarkModeToggle() {\n  const { colorMode, toggleColorMode } = useColorMode()\n  return (\n    <IconButton\n      aria-label='change color mode'\n      onClick={toggleColorMode}\n      icon={colorMode === 'light' ? <MoonIcon /> : <SunIcon />}\n      isRound={true}\n    />\n  )\n}\n","import React from 'react'\nimport { Text } from '@chakra-ui/react'\n\ntype Props = {\n  children: React.ReactElement\n}\n\nexport const NavItem = ({ children }: Props) => {\n  return (\n    <Text m='auto' p={4} fontSize='lg'>\n      {children}\n    </Text>\n  )\n}\n","import React from 'react'\nimport { Box, Flex, useColorMode } from '@chakra-ui/react'\nimport { Link, useRouteMatch } from 'react-router-dom'\nimport { DarkModeToggle } from '../DarkMode'\nimport { NavItem } from './NavItem'\nimport { MatchParams } from '../../types'\n\nexport const Header = () => {\n  const match = useRouteMatch<MatchParams>()\n\n  const { colorMode } = useColorMode()\n  const bgColor = { light: 'gray.200', dark: 'gray.700' }\n  return (\n    <Box h='4rem'>\n      <Box\n        zIndex={1}\n        p={4}\n        h='4rem'\n        bg={bgColor[colorMode]}\n        pos={'fixed'}\n        left='0'\n        right='0'\n        top='0'\n        borderBottomWidth='1px'\n        width='full'\n      >\n        <Flex justify='space-between' align='center' w='100%' h='100%'>\n          <Flex align='center' justify='space-evenly' maxWidth='480px'>\n            <NavItem>\n              <Link to='/'>Home</Link>\n            </NavItem>\n          </Flex>\n          <DarkModeToggle />\n        </Flex>\n      </Box>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { Grid, GridProps, Box, BoxProps, useColorMode } from '@chakra-ui/react'\n\nexport const ViewGrid = (props: GridProps) => <Grid {...props} templateColumns='16rem minmax(0, 1fr)' gap={0} />\n\nexport const ViewSide = (props: BoxProps) => {\n  const { colorMode } = useColorMode()\n  const borderColor = { light: 'gray.200', dark: 'gray.600' }\n  return (\n    <Box\n      {...props}\n      overflow='hidden'\n      borderRightStyle='solid'\n      borderRightColor={borderColor[colorMode]}\n      borderRightWidth='1px'\n    />\n  )\n}\n","import React from 'react'\nimport { Box } from '@chakra-ui/react'\nimport { CalendarEventType, PrefillEventData } from '../../../types'\n\nexport type CreateEventCaller = (data: PrefillEventData) => void\n\ntype Props = {\n  event: CalendarEventType\n  createEvent: CreateEventCaller\n}\n\nexport const EventCard = ({ event, createEvent }: Props) => {\n  return (\n    <Box\n      p={3}\n      bg={event.color}\n      rounded={6}\n      height={20}\n      fontSize={18}\n      onClick={() => createEvent({ type: event })}\n    >\n      {event.name}\n    </Box>\n  )\n}\n","import React, { PropsWithChildren } from 'react'\nimport { ViewGrid, ViewSide } from '../layout'\nimport { Box, Stack } from '@chakra-ui/react'\nimport { EventCard, CreateEventCaller } from '../eventCard'\nimport { CalendarEventType } from '../../../types'\n\ntype Props = {\n  events: CalendarEventType[]\n  createEvent: CreateEventCaller\n}\n\nexport const Sidebar = ({ events, createEvent }: Props) => {\n  const eventCards = events.map((event, index) => (\n    <EventCard key={index} event={event} createEvent={createEvent} />\n  ))\n  return (\n    <Stack spacing={2} padding={2}>\n      {eventCards}\n    </Stack>\n  )\n}\n\nexport const SidebarWrapper = ({\n  children,\n  events,\n  createEvent,\n}: Props & PropsWithChildren<{}>) => {\n  return (\n    <ViewGrid>\n      <ViewSide>\n        <Sidebar events={events} createEvent={createEvent} />\n      </ViewSide>\n      <Box p={3}>{children}</Box>\n    </ViewGrid>\n  )\n}\n","import React from 'react'\nimport { Box, Grid, useColorMode } from '@chakra-ui/react'\n\nconst week_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n\nexport const Calendar = () => {\n  const { colorMode } = useColorMode()\n  const bgColor = { light: 'gray.200', dark: 'gray.700' }\n  const altBgColor = { light: 'gray.300', dark: 'gray.600' }\n\n  const days = week_days.map((day, index) => (\n    <Box w='100%' h='14' bg={altBgColor[colorMode]} padding='3' fontSize='20'>\n      {day}\n    </Box>\n  ))\n  const table: any[] = new Array(9 * 7).fill(<Box w='100%' h='16' bg={bgColor[colorMode]} />)\n  return (\n    <Grid templateColumns='repeat(7, 1fr)' gap={1}>\n      {days}\n      {table}\n    </Grid>\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Select,\n  Textarea,\n} from '@chakra-ui/react'\nimport { CalendarEvent, CalendarEventType, Course, PrefillEventData } from '../../../types'\nimport store from 'store'\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  prefilledData: PrefillEventData\n}\n\nexport const CreateEventModal = ({ onClose, isOpen, prefilledData }: Props) => {\n  const initialState = {\n    title: '',\n    description: '',\n    location: '',\n    startTime: '',\n    duration: '',\n    type: prefilledData.type?.name,\n  }\n  const [{ title, description, location, startTime, duration, type }, setFormData] = useState(\n    initialState,\n  )\n  const clearState = () => {\n    setFormData({ ...initialState })\n  }\n  const onChange: React.ChangeEventHandler<any> = (event) => {\n    const { name, value } = event.target\n    setFormData((prevState) => ({ ...prevState, [name]: value }))\n  }\n  const location_options = store.get('locations').map((item: string, index: number) => (\n    <option key={index} value={item}>\n      {item}\n    </option>\n  ))\n  const current_course: Course = store.get('courses')[0] //TODO: add course selection and creation\n  const eventType_options = current_course.eventTypes.map(\n    (type: CalendarEventType, index: number) => (\n      <option key={index} value={type.name}>\n        {type.name}\n      </option>\n    ),\n  )\n  return (\n    <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Create Event</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <FormControl>\n            <FormLabel>Title</FormLabel>\n            <Input\n              name='title'\n              placeholder={`${prefilledData.type?.name} name`}\n              value={title}\n              onChange={onChange}\n            />\n          </FormControl>\n\n          <FormControl>\n            <FormLabel>Description</FormLabel>\n            <Textarea\n              name='description'\n              placeholder='Some text here'\n              value={description}\n              onChange={onChange}\n            />\n          </FormControl>\n\n          <FormControl>\n            <FormLabel>Location</FormLabel>\n            <Select\n              name='location'\n              placeholder='Select option'\n              value={location}\n              onChange={onChange}\n            >\n              {location_options}\n            </Select>\n          </FormControl>\n\n          <FormControl>\n            <FormLabel>Start Time</FormLabel>\n            <Input name='startTime' type='datetime-local' value={startTime} onChange={onChange} />\n          </FormControl>\n\n          <FormControl>\n            <FormLabel>Duration</FormLabel>\n            <Input name='duration' type='time' value={duration} onChange={onChange} />\n          </FormControl>\n\n          <FormControl>\n            <FormLabel>Event Type</FormLabel>\n            <Select\n              name='type'\n              defaultValue={prefilledData.type?.name}\n              placeholder='Select option'\n              value={type}\n              onChange={onChange}\n            >\n              {eventType_options}\n            </Select>\n          </FormControl>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button\n            colorScheme='blue'\n            mr={3}\n            onClick={() => {\n              console.log(`${title} ${description} ${location} ${startTime} ${duration} ${type}`)\n              clearState()\n              onClose()\n            }}\n          >\n            Create\n          </Button>\n          <Button variant='ghost' onClick={onClose}>\n            Cancel\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  )\n}\n\nconst save_event = (course_index: number, event: CalendarEvent) => {\n  const courses = store.get('course')\n  courses[course_index].push(event)\n  store.set('courses', courses)\n}\n","import React, { useState } from 'react'\nimport { Box, useDisclosure } from '@chakra-ui/react'\nimport { SidebarWrapper } from './components/sidebar'\nimport { Calendar } from './components/calendar'\nimport { Course, PrefillEventData } from '../types'\nimport { CreateEventModal } from './components/createEvent'\nimport store from 'store'\n\nexport const Home = () => {\n  const [eventData, setEventData] = useState<PrefillEventData>({})\n  const {\n    isOpen: isCreateEventOpen,\n    onOpen: onCreateEventOpen,\n    onClose: onCreateEventClose,\n  } = useDisclosure()\n  const createEvent = (data: PrefillEventData) => {\n    setEventData(data)\n    onCreateEventOpen()\n  }\n  const current_course: Course = store.get('courses')[0] //TODO: add course selection and creation\n  return (\n    <Box height='100%'>\n      <SidebarWrapper events={current_course.eventTypes} createEvent={createEvent}>\n        <Calendar />\n        <CreateEventModal\n          isOpen={isCreateEventOpen}\n          onClose={onCreateEventClose}\n          prefilledData={eventData}\n        />\n      </SidebarWrapper>\n    </Box>\n  )\n}\n","import React, { useState } from 'react'\nimport { Flex, Box, Heading, FormControl, FormLabel, Input, Button, Checkbox, useToast } from '@chakra-ui/react'\nimport { useHistory } from 'react-router-dom'\n\nexport const LoginBox = () => {\n  const history = useHistory()\n  const toast = useToast()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const handleSubmit = (event: { preventDefault: () => void; }) => {\n    if (username === 'ADMIN' && password ==='ADMIN') {\n      history.push(\"/home\")\n    } else {\n      toast({\n        title: \"Invalid Username/Password\",\n        status: \"error\",\n        isClosable: true,\n      })\n    }\n  };\n\n  return (\n    <Flex width='full' align='center' justifyContent='center'>\n      <Box margin={10} p={8} maxWidth=\"500px\" borderWidth={1} borderRadius={8} boxShadow=\"lg\">\n        <Box textAlign=\"center\">\n          <Heading>Login</Heading>\n        </Box>\n        <Box my={4} textAlign=\"left\">\n          <form onSubmit={handleSubmit}>\n            <FormControl isRequired>\n              <FormLabel>Username</FormLabel>\n              <Input \n                type=\"text\" \n                placeholder=\"Username\"\n                size='lg'\n                onChange={event => setUsername(event.currentTarget.value)}\n              />\n            </FormControl>\n            <FormControl mt={6} isRequired>\n              <FormLabel>Password</FormLabel>\n              <Input \n                type=\"password\"\n                placeholder=\"Password\"\n                size='lg'\n                onChange={event => setPassword(event.currentTarget.value)}\n              />\n            </FormControl>\n            <Checkbox>Remember Me</Checkbox>{/*TODO: Add functionality(Possible )*/}\n            <Button width=\"full\" mt={4} type=\"submit\">\n              Log In\n            </Button>\n          </form>\n        </Box>\n      </Box>\n    </Flex>\n  )\n}","import React from 'react'\nimport { Box } from '@chakra-ui/react'\nimport { LoginBox } from './components/loginBox'\n\nexport const Login = () => {\n  return (\n    <Box height='100%'>\n      <LoginBox />\n    </Box>\n  )\n} ","import { Box } from '@chakra-ui/react'\nimport React from 'react'\nimport { Redirect, Route, Switch, useRouteMatch } from 'react-router-dom'\nimport { Header } from './components/header'\nimport { Home } from './home'\nimport { Login } from './login'\n\nexport type MatchParams = {\n  isExact: string\n  path: string\n  url: string\n}\n\nconst Routes = () => {\n  const match = useRouteMatch<MatchParams>()\n  return (\n    <Box bgGradient='linear(to-r, blue.200, grey.500)'>\n      <Header />\n      <Box>\n        <Switch>\n          <Route exact key='route-login' path='/' component={Login} />\n          <Route exact key='route-home' path='/home' component={Home} />\n          <Redirect from='*' to='/' /> {/* TODO: add 404 page instead */}\n        </Switch>\n      </Box>\n    </Box>\n  )\n}\n\nexport default Routes\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport { HashRouter } from 'react-router-dom'\nimport './App.css'\nimport { CSSReset, ChakraProvider } from '@chakra-ui/react'\nimport Routes from './routes'\nimport { createBrowserHistory } from 'history'\nimport { setup_local_storage } from './schema'\n\nconst history = createBrowserHistory()\n\nfunction App() {\n  setup_local_storage()\n  return (\n    <ChakraProvider>\n      <CSSReset />\n      <HashRouter basename='/'>\n        <Routes />\n      </HashRouter>\n    </ChakraProvider>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { Course, Modules } from './types'\nimport store from 'store'\n\ntype Schema = {\n  courses: Course[]\n  locations: string[]\n}\n\nexport const setup_local_storage = () => {\n  const defaults: Schema = {\n    courses: [\n      {\n        name: 'test',\n        module: Modules.Databases,\n        description: 'this is a temporary test course',\n        courseId: 'test123',\n        enroled_groups: [],\n        shedulers: [],\n        events: [],\n        eventTypes: [\n          { name: 'Lecture', color: 'tomato' },\n          { name: 'Lab', color: 'orange' },\n          { name: 'Exam', color: 'purple' },\n        ],\n      },\n    ],\n    locations: ['London', 'HongKong', 'Paris'],\n  }\n  let item: keyof typeof defaults\n  for (item in defaults) {\n    if (store.get(item) === undefined) {\n      console.log(defaults[item])\n      store.set(item, defaults[item])\n    }\n  }\n}\n"],"sourceRoot":""}