{"version":3,"sources":["serviceWorker.ts","components/DarkMode/index.tsx","components/header/NavItem.tsx","components/header/index.tsx","home/components/layout/index.tsx","home/components/eventCard/index.tsx","home/components/sidebar/index.tsx","home/components/calendar/index.tsx","home/index.tsx","routes.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","DarkModeToggle","useColorMode","colorMode","toggleColorMode","aria-label","onClick","icon","Moon","Sun","isRound","NavItem","children","m","p","fontSize","Header","useRouteMatch","h","zIndex","bg","light","dark","pos","left","right","top","borderBottomWidth","width","justify","align","w","maxWidth","to","ViewGrid","props","templateColumns","gap","ViewSide","overflow","borderRightStyle","borderRightColor","borderRightWidth","EventCard","event","color","rounded","height","title","Sidebar","eventCards","events","map","index","spacing","padding","SidebarWrapper","week_days","Calendar","altBgColor","days","day","table","Array","fill","Home","Routes","bgGradient","exact","path","component","from","createBrowserHistory","App","basename","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a3c9aff4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport { IconButton, useColorMode } from '@chakra-ui/react'\nimport { MoonIcon, SunIcon } from '@chakra-ui/icons'\n\nexport function DarkModeToggle() {\n  const { colorMode, toggleColorMode } = useColorMode()\n  return (\n    <IconButton\n      aria-label='change color mode'\n      onClick={toggleColorMode}\n      icon={colorMode === 'light' ? <MoonIcon /> : <SunIcon />}\n      isRound={true}\n    />\n  )\n}\n","import React from 'react'\nimport { Text } from '@chakra-ui/react'\n\ntype Props = {\n  children: React.ReactElement\n}\n\nexport const NavItem = ({ children }: Props) => {\n  return (\n    <Text m='auto' p={4} fontSize='lg'>\n      {children}\n    </Text>\n  )\n}\n","import React from 'react'\nimport { Box, Flex, useColorMode } from '@chakra-ui/react'\nimport { Link, useRouteMatch } from 'react-router-dom'\nimport { DarkModeToggle } from '../DarkMode'\nimport { NavItem } from './NavItem'\nimport { MatchParams } from '../../types'\n\nexport const Header = () => {\n  const match = useRouteMatch<MatchParams>()\n\n  const { colorMode } = useColorMode()\n  const bgColor = { light: 'gray.200', dark: 'gray.700' }\n  return (\n    <Box h='4rem'>\n      <Box\n        zIndex={1}\n        p={4}\n        h='4rem'\n        bg={bgColor[colorMode]}\n        pos={'fixed'}\n        left='0'\n        right='0'\n        top='0'\n        borderBottomWidth='1px'\n        width='full'\n      >\n        <Flex justify='space-between' align='center' w='100%' h='100%'>\n          <Flex align='center' justify='space-evenly' maxWidth='480px'>\n            <NavItem>\n              <Link to='/'>Home</Link>\n            </NavItem>\n          </Flex>\n          <DarkModeToggle />\n        </Flex>\n      </Box>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { Grid, GridProps, Box, BoxProps, useColorMode } from '@chakra-ui/react'\n\nexport const ViewGrid = (props: GridProps) => <Grid {...props} templateColumns='16rem minmax(0, 1fr)' gap={0} />\n\nexport const ViewSide = (props: BoxProps) => {\n  const { colorMode } = useColorMode()\n  const borderColor = { light: 'gray.200', dark: 'gray.600' }\n  return (\n    <Box\n      {...props}\n      overflow='hidden'\n      borderRightStyle='solid'\n      borderRightColor={borderColor[colorMode]}\n      borderRightWidth='1px'\n    />\n  )\n}\n","import React from 'react'\nimport { Box } from '@chakra-ui/react'\nimport { CalendarEvent } from '../../../types'\n\ntype Props = {\n  event: CalendarEvent\n}\n\nexport const EventCard = ({ event }: Props) => {\n  return (\n    <Box p={3} bg={event.color} rounded={6} height={20} fontSize={18}>\n      {event.title}\n    </Box>\n  )\n}\n","import React, { PropsWithChildren } from 'react'\nimport { ViewGrid, ViewSide } from '../layout'\nimport { Box, Stack } from '@chakra-ui/react'\nimport { EventCard } from '../eventCard'\nimport { CalendarEvent } from '../../../types'\n\ntype Props = {\n  events: CalendarEvent[]\n}\n\nexport const Sidebar = ({ events }: Props) => {\n  const eventCards = events.map((event, index) => <EventCard key={index} event={event} />)\n  return (\n    <Stack spacing={2} padding={2}>\n      {eventCards}\n    </Stack>\n  )\n}\n\nexport const SidebarWrapper = ({ children, events }: Props & PropsWithChildren<{}>) => {\n  return (\n    <ViewGrid>\n      <ViewSide>\n        <Sidebar events={events} />\n      </ViewSide>\n      <Box p={3}>{children}</Box>\n    </ViewGrid>\n  )\n}\n","import React from 'react'\nimport { Box, Grid, useColorMode } from '@chakra-ui/react'\n\nconst week_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n\nexport const Calendar = () => {\n  const { colorMode } = useColorMode()\n  const bgColor = { light: 'gray.200', dark: 'gray.700' }\n  const altBgColor = { light: 'gray.300', dark: 'gray.600' }\n\n  const days = week_days.map((day, index) => (\n    <Box w='100%' h='14' bg={altBgColor[colorMode]} padding='3' fontSize='20'>\n      {day}\n    </Box>\n  ))\n  const table: any[] = new Array(9 * 7).fill(<Box w='100%' h='16' bg={bgColor[colorMode]} />)\n  return (\n    <Grid templateColumns='repeat(7, 1fr)' gap={1}>\n      {days}\n      {table}\n    </Grid>\n  )\n}\n","import React from 'react'\nimport { Box } from '@chakra-ui/react'\nimport { SidebarWrapper } from './components/sidebar'\nimport { Calendar } from './components/calendar'\nimport { CalendarEvent } from '../types'\n\nconst events: CalendarEvent[] = [\n  { title: 'Lecture', color: 'tomato' },\n  { title: 'Lab', color: 'orange' },\n  { title: 'Exam', color: 'purple' },\n]\n\nexport const Home = () => {\n  return (\n    <Box height='100%'>\n      <SidebarWrapper events={events}>\n        <Calendar />\n      </SidebarWrapper>\n    </Box>\n  )\n}\n","import { Box } from '@chakra-ui/react'\nimport React from 'react'\nimport { Redirect, Route, Switch, useRouteMatch } from 'react-router-dom'\nimport { Header } from './components/header'\nimport { Home } from './home'\n\nexport type MatchParams = {\n  isExact: string\n  path: string\n  url: string\n}\n\nconst Routes = () => {\n  const match = useRouteMatch<MatchParams>()\n  return (\n    <Box bgGradient='linear(to-r, blue.200, grey.500)'>\n      <Header />\n      <Box>\n        <Switch>\n          <Route exact key='route-home' path='/' component={Home} />\n          <Redirect from='*' to='/' /> {/* TODO: add 404 page instead */}\n        </Switch>\n      </Box>\n    </Box>\n  )\n}\n\nexport default Routes\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport { HashRouter } from 'react-router-dom'\nimport './App.css'\nimport { CSSReset, ChakraProvider } from '@chakra-ui/react'\nimport Routes from './routes'\nimport { createBrowserHistory } from 'history'\n\nconst history = createBrowserHistory()\n\nfunction App() {\n  return (\n    <ChakraProvider>\n      <CSSReset />\n      <HashRouter basename='/'>\n        <Routes />\n      </HashRouter>\n    </ChakraProvider>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}